logging:
  level:
    tk.mybatis: DEBUG
    com.mit: debug
spring:
  redis:
    #database: 2
    host: ${REDIS_HOST:127.0.0.1}
    port: ${REDIS_PORT:6379}
    pool:
    max-active: 20
  application:
    name: camera-server
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
    default-property-inclusion: non_null
  datasource:
    druid:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://127.0.0.1:3306/camera_manage?useUnicode=true&characterEncoding=UTF8&allowMultiQueries=true&serverTimezone=Asia/Shanghai
      username: root
      password: 123456
      #        name: test
      #        url: jdbc:mysql://localhost:3306/mit-cloud?useUnicode=true&characterEncoding=UTF8
      #        username: root
      #        password: world
      #        # 使用druid数据源
      ##        type: com.alibaba.druid.pool.DruidDataSource
      #        driver-class-name: com.mysql.jdbc.Driver
      maxActive: 20
      initialSize: 1
      maxWait: 60000
      minIdle: 1
      timeBetweenEvictionRunsMillis: 60000
      minEvictableIdleTimeMillis: 300000
      validationQuery: select 'x'
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      poolPreparedStatements: true
      maxOpenPreparedStatements: 20
      aop-patterns: "com.mit.community"
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: /druid/*
        session-stat-enable: true
        session-stat-max-count: 100
        principal-session-name: mit-session
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        reset-enable: true
        login-username: admin
        login-password: admin
        #allow: 192.168.1.222
        allow: 127.0.0.1
      filter:
        stat:
          db-type: mysql
          log-slow-sql: true
          slow-sql-millis: 10
        wall:
          enabled: true
          db-type: mysql
          config:
            drop-table-allow: false
            multi-statement-allow: true
        slf4j:
          enabled: true
          statement-create-after-log-enabled: false
          statement-close-after-log-enabled: false
          result-set-open-after-log-enabled: false
          result-set-close-after-log-enabled: false
  #    rabbitmq:
  #        host: ${RABBIT_MQ_HOST:localhost}
  #        host: localhost
  #        port:  5672
  #        username: guest
  #        password: guest
  sleuth:
    enabled: true
    http:
      legacy:
        enabled: true
  servlet:
    #文件上传大小配置
    multipart:
      enabled: true
      file-size-threshold: 0
      max-file-size: 10MB
      max-request-size: 10MB
  main:
    allow-bean-definition-overriding: true

# 服务跟踪
sample:
  zipkin:
    # When enabled=false, traces log to the console. Comment to send to zipkin
    enabled: false

#mybatis:
#  basepackage: com.mit.community.mapper
#  xmlLocation: classpath:mapper/**/*.xml
#  mapper-locations: "classpath*:mapper/*.xml"

server:
  port: 8010
  servlet:
    context-path: /cloud-service/
    #context-path: /API/

eureka:
  instance:
    metadata-map:
      # SpringBootAdmin本身作为一个Eureka客户端被发现，这里由于SpringBootAdmin需要进行登录
      # 因此，此处配置SpringBootAdmin登录时使用的用户名密码
      # 当这个服务成功注册到 Eureka 上，Spring Boot Admin 就会取拿到这个 instance，进而拿到 metadataMap 里的属性，然后放入请求头，向此服务发送请求
      user.name: ${spring.security.user.name}
      user.password: ${spring.security.user.password}
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${server.port}
    hostname: camera-server

  client:
    service-url:
      # eureka-server的地址，这里开启了身份验证，下面用户名密码是Eureka服务端开启认证的用户密码120.24.163.79
      defaultZone: http://${eureka-server-user:admin}:${eureka-server-password:mit123456}@${eureka-server-host:192.168.1.130}:${eureka-server-port:8761}/eureka/

# 必须配置
feign:
  httpclient:
    enabled: false
  okhttp:
    enabled: true
ribbon:
  eureka:
    enabled: true
  ReadTimeout: 100000
  ConnectTimeout: 100000
  MaxAutoRetries: 0
  MaxAutoRetriesNextServer: 1
  OkToRetryOnAllOperations: false

hystrix:
  threadpool:
    default:
      ##并发执行的最大线程数，默认10
      coreSize: 1000
      ##BlockingQueue的最大队列数
      maxQueueSize: 1000
      ##即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝
      queueSizeRejectionThreshold: 500
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 30000


# 配置swagger
swagger:
  enabled: true
  base-package: com.mit.community
  title: com.mit.community
  version: 1.0.0.SNAPSHOT
  description: camera-manage
  contact:
    name: community
#服务调用的配置。
#
auth:
  # 会请求这个服务去验证哪些服务可以调用这个服务
  serviceId: auth
  # token的key
  user:
    token-header: Authorization
  client:
    # 服务的标识符，必须和数据库一致
    id: web-community-wanli
    # 服务的秘钥， 必须和数据库一致
    secret: 123456
    token-header: x-client-token

#redis-cache 相关
redis:
  pool:
    maxActive: 300
    maxIdle: 100
    maxWait: 1000
  host: ${REDIS_HOST:127.0.0.1}
  port:  ${REDIS_PORT:6379}
  password:
  timeout: 2000
  # 服务或应用名
  sysName: community
  enable: true
  database: 0

management:
  endpoints:
    web:
      exposure:
        include: '*'
      security:
        enabled: false
# 更多数据源
#db:
#  datasource:
#    datasouce1:
#      driver-class-name: com.mysql.jdbc.Driver
#      url: jdbc:mysql://localhost:3306/camera_manage?useUnicode=true&characterEncoding=UTF8&allowMultiQueries=true&serverTimezone=GMT%2B8
#      #url: jdbc:mysql://127.0.0.1:3306/community_wanli?useUnicode=true&characterEncoding=UTF8&allowMultiQueries=true
#      username: root
#      password: 123456
#    datasouce2:
#      driver-class-name: com.mysql.jdbc.Driver
#      url: jdbc:mysql://localhost:3306/camera_manage?useUnicode=true&characterEncoding=UTF8&allowMultiQueries=true&serverTimezone=GMT%2B8
#      #url: jdbc:mysql://127.0.0.1:3306/community_wanli?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true
#      username: root
#      password: 123456

mybatis-plus:
  mapper-locations: classpath:com/mit/community/mapper/*.xml
  typeAliasesPackage: com.mit.community.modelTest
  global-config:
    id-type: 0  #0:数据库ID自增   1:用户输入id  2:全局唯一id(IdWorker)  3:全局唯一ID(uuid)
    db-column-underline: false
    refresh-mapper: true
  configuration:
    map-underscore-to-camel-case: false
    cache-enabled: true #配置的缓存的全局开关
    lazyLoadingEnabled: true #延时加载的开关
    multipleResultSetsEnabled: true #开启的话，延时加载一个属性时会加载该对象全部属性，否则按需加载属性
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #打印sql语句,调试用

hik-manager:
  ip: 192.168.1.230
  port: 80
  appkey: 26234840
  appsecret: DCQUuXxOKd0pqZ3oa20y


security:
  oauth2:
    ignored: /hkFace/**, /hkFaceGroup/**, /hkRecognitionPlan/**, /hkHardware/**, /device/**, /video/**, /wifi/**, /platform/**, /alarmDevice/**, /alarmmessage/**, /snapVehicle/**
zuul:
  host:
    connect-timeout-millis: 10000
    socket-timeout-millis: 60000

showDeviceUrl: http://23zh498270.wicp.vip/cloud-service/hkVideoDevice/showDevices
localIpAdress: http://23zh498270.wicp.vip
#url: http://120.24.163.79:8765/cloud-service/platform/getImageUrl
#jsonUrl: http://120.24.163.79:8765/cloud-service/platform/getJsonInfo
#alarmUrl: http://120.24.163.79:8765/cloud-service/alarmDevice/getAlarmInfo
#communityCode: d58a5663fac24da3b7c618e49aa74277
#dllPath: F:/lib/HCNetSDK.dll